* diagnosis notes
- results from interactive sessions
- Q: what do we learn about the lattices from the new (memory) stats?
** suffixtree (v ???)
*** module-names
- 0 = data
- 1 = label
- 2 = lcs
- 3 = main
- 4 = structs
- 5 = ukkonen
*** time
- ? > 83,000ms        =  8 = 0/4
                      =  9 = 0 untyped
- ? > 60,000ms        = 26 = 0/1 or 0/4
                           = 0/1 or 1/4
                           = 0/4 or 1/4
                           = 0/1 or 2/4
                           = 0/1 or 3/4
- 60,000 > ? > 40,000 = 14 = 0/4
- 40,000 > ? > 20,000 =  7 = not 0/1 | */5t and */4u
- 20,000 > ? >  9,000 =  8 = not 0/1
*** gctime
- ? > 1450337500000            =  2 = 011001 100110 (opposites!)
                                    = data/label label/structs structs/ukkonen lcs/main
- ? > 1450337000000            =  7 = 0/1 and 0/2 (and 1/3 and 2/3)
- ? > 1450335900000            = 16 = 0/1 and 0/2
                                    = 0/1 and 1/2
- 1450337000000 > ? > 1450335900000 = 0/1 and 0/2
                                    = 0/2 and 1/2
                                    = 0/1 and 0/3
                                    = 0/3 and 1/4
- these are still all over. Must be specific values
- worst has most boundaries (based on modulegraph)
- best is untyped
- fully-typed still shitty
*** numgc
- ? > 350 = 2 = 000010 000011
- 300 > ? > 230 = 13 = 1/4
- is this randomized?
- OOPS I'm using incremental GC
*** maxbytes
- ? > 9*10^7   = 7 = 0/1 or 1/4 or (not 0t/4t)
- ? > 8.5*10^7 = 16 = 1/4
- ? > 8*10^7   = 20 = 1/4
- ? > 7.5*10^7 = 52 = ??? all over
- worst is 10--1-
*** procmakes
- > 1000 = 32 = 4/5
- only for node-follow/k
- conclusion: unrelated to performance
*** procapps
- ? > 2*10^8    =  8 = 0/1 or 0/4
- ? > 1.25*10^8 = 24 = 0/1 and 0/4
                    or 0/1 and 1/4
                    or 0/4 and 1/4
- these are just the heavy boundaries
- top 75% with time  = 11 = 
** 6.3
*** gregor
**** time
**** gctime
**** numgc
**** maxbytes
**** proc-makes
**** proc-apps
**** struct-makes
**** struct-apps
**** vec-makes
**** vec-apps
*** kcfa
**** time
**** gctime
**** numgc
**** maxbytes
**** proc-makes
**** proc-apps
**** struct-makes
**** struct-apps
**** vec-makes
**** vec-apps
*** lnm
**** time
**** gctime
**** numgc
**** maxbytes
**** proc-makes
**** proc-apps
**** struct-makes
**** struct-apps
**** vec-makes
**** vec-apps
*** mbta
**** time
**** gctime
**** numgc
**** maxbytes
**** proc-makes
**** proc-apps
**** struct-makes
**** struct-apps
**** vec-makes
**** vec-apps
*** snake
**** time
**** gctime
**** numgc
**** maxbytes
**** proc-makes
**** proc-apps
**** struct-makes
**** struct-apps
**** vec-makes
**** vec-apps
*** suffixtree (64)
**** time
- ? > 500000 = 32 = 0/1
- ~ 200000   =  2 = 000010 000011
**** gctime
- less weird this time
- ? > 1.45137*10^7 = 0/1 , 0/2
              = (how many typed? 2, 3)
- 1.45137*10^7 > ? > 1.451368*10^6 = 110000 ... 110011
**** numgc
- whoa, much higher (and simpler)
- ? > 5000 = 32 = 0/1
- highly correlated, maybe red herring (gc triggered every N seconds)
**** maxbytes
- ? > 1 * 10^8       = 36 = 0/1, besides 000010 ... 001110
- 1*10^8 > ? 8*10^7  =  4 = 000011 ... 001111
**** proc-makes
- ? > 50000          = 32 = 4/5
- same as before
**** proc-apps
- ? > 4*10^8               =  4 = 010010 ... 011110
- 4*10^8 > ? > 3.6*10^8    =  4 = 010011 ... 011111
- 3.6*10^8 > ? 3*10^8      = 16 = 1/4, and either 0u/1 or 0u/4
- 3*10^8 > ? > 2*10^8      = 16 = 0t/1u
**** proc-maxd
- ? = 2                    = 20 = 0/4
**** struct-makes
- flat
**** struct-apps
- flat
**** vec-makes HEY
- ? > 40000 = 8 = 1/2, 1/4, and 0u/1t or 0t/4u
**** vec-apps
- ? > 125000 = 16 = 0/1, 1/2
- uncorrelated with time
*** synth
**** time
**** gctime
**** numgc
**** maxbytes
**** proc-makes
**** proc-apps
**** struct-makes
**** struct-apps
**** vec-makes
**** vec-apps
*** tetris
**** time
**** gctime
**** numgc
**** maxbytes
**** proc-makes
**** proc-apps
**** struct-makes
**** struct-apps
**** vec-makes
**** vec-apps
*** zordoz
**** time
**** gctime
**** numgc
**** maxbytes
**** proc-makes
**** proc-apps
**** struct-makes
**** struct-apps
**** vec-makes
**** vec-apps
*** zombie (16) [beware 1/3]
- 0 image
- 1 main
- 2 math
- 3 zombie
**** time
- ? > 300 = 8 = 1/3
**** gctime
- ? > _ = 8 = 2t
**** numgc
- ? > 70 = 8 = 1/3
**** maxbytes
- ? > 5*10^7 = 4 = 1/3, 2t
**** proc-makes
- ? > 300 = 8 = 1/3
**** proc-apps
- ? > 5500 = 8 = 2/3
**** struct-makes
- 58
**** struct-apps
- 0 
**** vec-makes
- 0
**** vec-apps
- 0
