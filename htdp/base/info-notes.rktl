((3) 3 (((lib "scribble/decode-struct.rkt") . deserialize-info:part-index-desc-v0) ((lib "scribble/render-struct.rkt") . deserialize-info:mobile-root-v0) ((lib "scribble/core.rkt") . deserialize-info:element-v0)) 37 ((c counter c (c (? . 27) c (? . 28))) "Dealing with Part I: College" (q part "college") (c (? . 1)) "A Note on Teaching Part I" (0) "AllKeys" (c counter c (c (? . 11) c (? . 21))) (p+ #"./Trash/notes/notes/note_mice-and-chars.html" . unix) (q tech "allmouseevt") "AllMouseEvts" "figure" (c counter c (c (? . 11) c (? . 16))) (q part "note:mice-and-chars") "A Note on Mice and Characters" (c (? . 14)) "fig:key-record" (q part "note:teaching") (c (? . 4)) (q 1) (p+ #"./Trash/notes/notes/note_teaching.html" . unix) "fig:mouse-record" "value" (q part "notes") (q tech "allkey") "Notes on How to Design Programs, Second Edition" (c (? . 25)) "exercise" "design11a" (c (? . 22)) (q part "k12") (c counter c (c (? . 11) c (? . 36))) "Dealing with Part I: K-12" (c (? . 32)) "design11" (c counter c (c (? . 27) c (? . 34))) "fig:collect-digits") () (c (1 #f) h ! (equal) ((? . 0) v! #f (? . 0) #f (? . 8) #f) ((c index-entry c (? . 2)) c (c (? . 1)) c (c (2 #f (? . 3))) c (? . 5)) ((? . 2) v! (? . 3) (? . 2) (c 1 ? . 19) (? . 20) #f) ((c index-entry c (? . 17)) c (c (? . 4)) c (c (2 #f (? . 18))) c (? . 5)) ((c index-entry c (? . 24)) c (c (? . 6)) c (c (2 italic (? . 6))) q tech) ((? . 7) v! #f (? . 7) #f (? . 8) #f) ((? . 9) v! #f (? . 9) #f (? . 8) #f) ((c index-entry c (? . 9)) c (c (? . 10)) c (c (2 italic (? . 10))) q tech) ((? . 12) v! #f (? . 12) #f (? . 8) #f) ((? . 13) v! (? . 15) (? . 13) (q 2) (? . 8) #t) ((c index-entry c (? . 13)) c (c (? . 14)) c (c (2 #f (? . 15))) c (? . 5)) ((c counter c (c (? . 11) c (? . 16) c (? . 22))) . 3) ((? . 17) v! (? . 18) (? . 17) (? . 19) (? . 20) #t) ((c counter c (c (? . 11) c (? . 21) c (? . 22))) . 2) ((? . 23) v! (? . 26) (? . 23) () (p+ #"./Trash/notes/notes/index.html" . unix) #t) ((? . 24) v! #f (? . 24) #f (? . 8) #f) ((c index-entry c (? . 23)) c (c (? . 25)) c (c (2 #f (? . 26))) c (? . 5)) ((c counter c (c (? . 27) c (? . 34) ? . 29)) . 2) ((c counter c (c (? . 27) c (? . 28) ? . 29)) . 1) ((? . 30) v! (? . 33) (? . 30) (c 2 ? . 19) (? . 20) #f) ((? . 31) v! #f (? . 31) #f (? . 20) #f) ((c index-entry c (? . 30)) c (c (? . 32)) c (c (2 #f (? . 33))) c (? . 5)) ((? . 35) v! #f (? . 35) #f (? . 8) #f) ((c counter c (c (? . 11) c (? . 36) c (? . 22))) . 1)))